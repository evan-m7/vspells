<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VSPELLS Homepage on VSPELLS HOMEPAGE</title><link>http://evan-m7.github.io/vspells/</link><description>Recent content in VSPELLS Homepage on VSPELLS HOMEPAGE</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 18 Feb 2022 01:05:47 -0600</lastBuildDate><atom:link href="http://evan-m7.github.io/vspells/index.xml" rel="self" type="application/rss+xml"/><item><title>Symbolic Execution</title><link>http://evan-m7.github.io/vspells/posts/page1/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts/page1/</guid><description>What Does Code Below Show? Component &amp;ndash;&amp;gt; Software Components Processor &amp;ndash;&amp;gt; Hardware Processors Mapping &amp;ndash;&amp;gt; Mapping Between The Two Outcome is one inference rule describing a bad mappings shown by models (m &amp;amp; pm) of Mapping. FORMULA: Initial Version of Symbolic Executer Engine Representative Example
Copy domain Mapping { Component ::= new (id: Integer, utilization: Real). Processor ::= new (id: Integer). Mapping ::= new (c: Component, p: Processor).</description></item><item><title>VS Code Environment</title><link>http://evan-m7.github.io/vspells/posts/page2/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts/page2/</guid><description>FORMULA Developments Initial Version vs. Code Extension Goal: Working toward a notebook-style interface
Representative Code Example Copy domain Arith Id ::= { NIL } + Integer + String. Name ::= new (name: String, id: Id). Number ::= new (op: Real id: Id) UnApp ::= new (op: ( NOT, NEG ), arg1: any Expr, id: Id). Sin ::= new (arg: any Expr, id: Id).</description></item><item><title>Nix Support</title><link>http://evan-m7.github.io/vspells/posts/page3/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts/page3/</guid><description>Adds nix language support for VSCode Editor Features Syntax Highlight Nix code snippets inside markdown files also work. Full editing support with rnix-LSP When Language Server support is not enabled the following tools are used to Formatting support with the help of nixpkgs-format or other tools as specified by the nix.formatterPath option Error Report Using nix-instantiate errors reported Snippets</description></item><item><title>Tree-sitter Grammar</title><link>http://evan-m7.github.io/vspells/posts/page4/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts/page4/</guid><description>Tree-sitter grammar for Formula using vscode-anycode Why Anycode for Formula? A Tree-sitter-based language extension that inaccurately implements popular features like &amp;ldquo;Outline &amp;amp; Breadcrumbs&amp;rdquo;, &amp;ldquo;Go to Symbol in Workspace&amp;rdquo;, &amp;ldquo;Document Highlights&amp;rdquo; and more. This extension should be used when running in enviroments that don&amp;rsquo;t allow for running actual language services, like Formula
Anycode Features The features provided by this extension are meant to be better than full-text search, but fall short when compared to real language services.</description></item><item><title>Academia</title><link>http://evan-m7.github.io/vspells/posts3/page2/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts3/page2/</guid><description>Research DSLs Importance Powerful DSLs can be constructed for the operation of the robotic system. Hardware DSLs can also be created that monitor different subsystems such as battery depletion. The state space of the system can be thoroughly searched and verified. Heisenbugs that only show up in rare instances over long periods of time, can be uncovered using the P model checker. Not only can systems be modeled and tested, but the code for running the system can be auto generated from the models.</description></item><item><title>Cross-domain Reasoning Over Software Components and Battery Consumption</title><link>http://evan-m7.github.io/vspells/posts2/page1/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts2/page1/</guid><description>Multi-DSL Reasoning Drone HW Spec DSL &amp;ndash;&amp;gt; Logical Encoding (encoding) DSL Mission PLanner (P) DSL &amp;ndash;&amp;gt; Logical Encoding (encoding) DSL Energy Consuption Model DSL &amp;ndash;&amp;gt; Logical Encoding (encoding) DSL Goal: Analyze an end-to-end safety property; e.g., “drone will always have enough battery capacity to return to the base during the mission” Need an ability to reason about interaction between mission logic and energy usage
Approach: Develop multiple DSLs to capture these aspects in separate programs Translate these DSL programs into the logical encoding in FORMULA Leverage the symbolic execution engine in FORMULA for cross-domain analysis</description></item><item><title>Page 1</title><link>http://evan-m7.github.io/vspells/shortcuts/page1/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/shortcuts/page1/</guid><description>Hello, this is content!!!!!</description></item><item><title>Page 2</title><link>http://evan-m7.github.io/vspells/posts2/page2/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts2/page2/</guid><description>Hello, this is content!!!!!</description></item><item><title>Page 2</title><link>http://evan-m7.github.io/vspells/shortcuts/page2/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/shortcuts/page2/</guid><description>Hello, this is content!!!!!
More content</description></item><item><title>Real World Application</title><link>http://evan-m7.github.io/vspells/posts3/page1/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts3/page1/</guid><description>Overview P is a state machine based programming language for modeling and specifying complex distributed systems. P allows programmers to model their system as a collection of communicating state machines. P supports several backend analysis engines such as model checking and symbolic execution. P can be systematically tested and compiled into executable code. Combining P with MavSDK, which is a collection of libraries to interface with the MAVLink drone messaging framework, creates a powerful simulation and testing environment for drone robotics systems.</description></item></channel></rss>