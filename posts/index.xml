<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Formula Work on VU-CMU CODES Homepage</title><link>http://evan-m7.github.io/vspells/posts/</link><description>Recent content in Formula Work on VU-CMU CODES Homepage</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 18 Feb 2022 01:05:47 -0600</lastBuildDate><atom:link href="http://evan-m7.github.io/vspells/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Symbolic Execution</title><link>http://evan-m7.github.io/vspells/posts/page1/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts/page1/</guid><description>What Does Code Below Show? Component &amp;ndash;&amp;gt; Software Components Processor &amp;ndash;&amp;gt; Hardware Processors Mapping &amp;ndash;&amp;gt; Mapping Between The Two Outcome is one inference rule describing a bad mappings shown by models (m &amp;amp; pm) of Mapping. FORMULA: Initial Version of Symbolic Executer Engine Representative Example
Copy domain Mapping { Component ::= new (id: Integer, utilization: Real). Processor ::= new (id: Integer). Mapping ::= new (c: Component, p: Processor).</description></item><item><title>VS Code Environment</title><link>http://evan-m7.github.io/vspells/posts/page2/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts/page2/</guid><description>FORMULA Developments Initial Version vs. Code Extension Goal: Working toward a notebook-style interface
Representative Code Example Copy domain Arith Id ::= { NIL } + Integer + String. Name ::= new (name: String, id: Id). Number ::= new (op: Real id: Id) UnApp ::= new (op: ( NOT, NEG ), arg1: any Expr, id: Id). Sin ::= new (arg: any Expr, id: Id).</description></item><item><title>Nix Support</title><link>http://evan-m7.github.io/vspells/posts/page3/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts/page3/</guid><description>Adds nix language support for VSCode Editor Features Syntax Highlight Nix code snippets inside markdown files also work. Full editing support with rnix-LSP When Language Server support is not enabled the following tools are used to Formatting support with the help of nixpkgs-format or other tools as specified by the nix.formatterPath option Error Report Using nix-instantiate errors reported Snippets</description></item><item><title>Tree-sitter Grammar</title><link>http://evan-m7.github.io/vspells/posts/page4/</link><pubDate>Fri, 11 Feb 2022 04:35:10 -0600</pubDate><guid>http://evan-m7.github.io/vspells/posts/page4/</guid><description>Tree-sitter grammar for Formula using vscode-anycode Why Anycode for Formula? A Tree-sitter-based language extension that inaccurately implements popular features like &amp;ldquo;Outline &amp;amp; Breadcrumbs&amp;rdquo;, &amp;ldquo;Go to Symbol in Workspace&amp;rdquo;, &amp;ldquo;Document Highlights&amp;rdquo; and more. This extension should be used when running in enviroments that don&amp;rsquo;t allow for running actual language services, like Formula
Anycode Features The features provided by this extension are meant to be better than full-text search, but fall short when compared to real language services.</description></item></channel></rss>