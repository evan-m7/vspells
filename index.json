[{"uri":"http://evan-m7.github.io/vspells/posts/","title":"Formula Work","tags":null,"description":"","content":"FORMULA is a open-source language and tool for defining domain-specific languages (DSLs) and checking properties of those DSLs. FORMULA core development: adding features to the FORMULA tool.\nSymbolic Execution   VS Code Environment   Nix Support   Tree-sitter Grammar    "},{"uri":"http://evan-m7.github.io/vspells/posts/page1/","title":"Symbolic Execution","tags":null,"description":"","content":"FORMULA Developments FORMULA: Initial Version of Symbolic Executer Engine Representative Example\nCopy    domain Mapping { \tComponent ::= new (id: Integer, utilization: Real). \tProcessor ::= new (id: Integer). \tMapping ::= new (c: Component, p: Processor). \t\tbadMapping :- p is Processor,  s = sum (0.0, { c.utilization |  c is Component, Mapping (c, p) }), s \u0026gt; 100.   conforms no badMapping. }  model m of Mapping { \tc1 is Component (0, 10). \tc2 is Component (1, 91). \tp1 is Processor (0). \tMapping (c1, p1). \tMapping (c2, p1). }  partial model pm of Mapping { \tc1 is Component (0, x). \tc2 is Component (1, 90). \tp1 is Processor (0). \tMapping (c1, p1). \tMapping (c2, p1). }    What Does Code Show?\n Component \u0026ndash;\u0026gt; Software Components Processor \u0026ndash;\u0026gt; Hardware Processors Mapping \u0026ndash;\u0026gt; Mapping Between The Two  Outcome is one inference rule describing a bad mappings shown by models (m \u0026amp; pm) of Mapping.\n"},{"uri":"http://evan-m7.github.io/vspells/posts2/","title":"Battery Consumption DSL","tags":null,"description":"","content":"On-going work on DSL for energy models Designing a mini-DSL for drone energy models  Study a range of energy consumption models for drones Provide factors influencing energy (e.g., payload amount, flight altitude, mission parameters) as domain abstractions Encode the domain semantics (i.e., mathematical equations for computing energy consumption rate) in FORMULA  Cross-domain Reasoning Over Software Components and Battery Consumption   Page 2    "},{"uri":"http://evan-m7.github.io/vspells/posts/page2/","title":"VS Code Environment","tags":null,"description":"","content":"FORMULA Developments Initial Version vs. Code Extension Goal: Working toward a notebook-style interface\nRepresentative Code Example Copy    domain Arith  Id ::= { NIL } + Integer + String.   Name ::= new (name: String, id: Id).   Number ::= new (op: Real  id: Id)   UnApp ::= new (op: ( NOT, NEG ),  arg1: any Expr,  id: Id).   Sin ::= new (arg: any Expr, id: Id).  Cos ::= new (arg: any Expr, id: Id).   Expr ::= Name + Nunber + UnApp - BinApp + Sin + Cos.   Res ::= (id: Id, res: Real).   Res(id, res) :- n is Nunber, id = n.id, res = n.op.   Res(id, res) :- e is BinApp, arg1 is Res, arg2 is Res,  e.op = ADD,  arg1.id = e.arg1.id,  arg2.id = e.arg2.id,  res = arg1.res + arg2.res,  id = e.id.   Res(id, res) :- e is BinApp, arg1 is Res, arg2 is Res,  e.op = SUB,  arg1.id = e.arg1. id,  arg2.id = e.arg2.id,  res = arg1.res - arg2.res,  id = e.id.   Res(id, res) :- e is BinApp, arg1 is Res, arg2 is Res,  e.op = DIV,  arg1.id = e.arg1.id,  arg2.id = e.arg2.id,  res = arg1.res / arg2.res,  id = e.id.   Res(id, res) :- e is BinApp, arg1 is Res, arg2 is Res,  e.op = MUL,  arg1.id = e.arg1.1d,  arg2.id = e.arg2.id,  res = arg1.res * arg2.res,  id = e.id.   Res(id, res) :-s is Sin, arg1 is Res,  arg1.id = s.arg.id,  val = arg1.res,    Output After Running Copy    Creating file stream for file took: 0 Tokenizing for file took: 24 Parsing file took: 36 Visiting file took: 21 (Compiled) IntGraphs.4ml 0.36s.   1s  v 0.85  Environment variables  Programs in file root +-- /  +-. home  +-- stephen  git  +-- formula- dotnet  +-- Doc  +-- Samples 1 file(s)  | IntGraphs.4ml  Programs in env root +-- /  All tasks Id | Kind | Status | Result | Started | Duration ---|------|--------|--------|---------|--------- 0.01s.   query Gex E(x, x)  v 0.15  Parsing text took: 0 Visiting text took: 0 Started query task with Id 1. 0.01s.   ls tasks  v 0.1s  All tasks Id | Kind | Status | Result | Started | Duration ---|-------|--------|--------|----------------|--------- 0 | Query | Done | true | 2/1/2022 5:31 PM | 0.02s 1 | Query | Done | true | 2/1/2022 5:32 PM | 0.00s 0.00s.   exit    "},{"uri":"http://evan-m7.github.io/vspells/posts3/","title":"PX4 Drone Examples","tags":null,"description":"","content":"The field of robotics is ever growing with state spaces exploding due to their complexity. With increasing complexity and the asynchronous nature of modern programs, comes the demand for more robust testing. Current unit testing methods only cover a portion of code, do not efficiently search the entire state space, and often leave interleavings due to concurrency untested. The P programming language is a modeling language and set of associated tools aimed at helping to create modular and safe distributed systems. Academia   Real World Application    "},{"uri":"http://evan-m7.github.io/vspells/posts/page3/","title":"Nix Support","tags":null,"description":"","content":"Adds nix language support for VSCode Editor Features  Syntax Highlight  Nix code snippets inside markdown files also work.   Full editing support with rnix-LSP When Language Server support is not enabled the following tools are used to  Formatting support  with the help of nixpkgs-format or other tools as specified by the nix.formatterPath option   Error Report  Using nix-instantiate errors reported     Snippets  "},{"uri":"http://evan-m7.github.io/vspells/posts/page4/","title":"Tree-sitter Grammar","tags":null,"description":"","content":"Tree-sitter grammar for Formula using vscode-anycode Why Anycode for Formula? A Tree-sitter-based language extension that inaccurately implements popular features like \u0026ldquo;Outline \u0026amp; Breadcrumbs\u0026rdquo;, \u0026ldquo;Go to Symbol in Workspace\u0026rdquo;, \u0026ldquo;Document Highlights\u0026rdquo; and more. This extension should be used when running in enviroments that don\u0026rsquo;t allow for running actual language services, like Formula\nAnycode Features The features provided by this extension are meant to be better than full-text search, but fall short when compared to real language services. We refer to this as \u0026ldquo;partial mode\u0026rdquo; and anycode will show a language status item when inaccurate language support is active.\nAnycode identifies and compares usages and declarations.\nOutline - A parse tree itself is an outline. However, it is too detailed and anycode selects declarations like functions, classes with its memebers, interfaces etc.\nGo to Symbol - Anything that would show in outline (declarations) is stored in a trie so that it can be found by typing names or partial names of declarations. How well this works across file depends on the anycode.symbolIndexSize-setting - it defauls to 100 and defines how many files are eagerly fetched and analyzed.\nGo to Definition - Works just like \u0026ldquo;Go to Symbol\u0026rdquo; but it uses the current identifier as the name to find declarations for. This isn\u0026rsquo;t semantic and depending on your project yields false positives, e.g it will find all run-methods and not just Runnable#run etc\nCompletions - Any identifier of the current document and the names of all known declarations are always suggested as completions. So, no precise member-completion but identifiers.\nExpand/Shrink Selection - Solely based on parse trees. It finds the node at the current position and returns all parents as selection.\nSyntax Validation - Tree-sitter parsers can recover from malformed source code. In case error nodes are inserted into the parse tree and anycode can report them as diagnostics. Note that validation is off by default and that it must be enabled via the anycode.language.features#diagnostics-setting.\nDocument Highlights - For local variables and function arguments usages in their scope are computed and highlighted. If that\u0026rsquo;s not possible, all identifiers with the same name are highlighted - 1 only identifier based highlights implemented\nReference Search - All usages, such as function-calls or member-accesses, are kept in a trie which is later used for reference search. Like \u0026ldquo;Go to Symbol\u0026rdquo; its result depend on the anycode.symbolIndexSize-setting.\nLast, there is the anycode.language.features-setting which controls what feature is enabled or disabled - either for all or just specific languages.\n"},{"uri":"http://evan-m7.github.io/vspells/shortcuts/","title":"Shortcuts","tags":null,"description":"","content":"My Custom Description\n  Square 1\n  Square 2\n  Shortcodes Features:\n [I’m an info alert]  [I’m an danger alert]  [I’m an warning alert]  [I’m an success alert]  [Button to Google]  Page 1   Page 2    Copy    \u0026lt;div class=\u0026#34;mydiv bg-primary shadow text-white\u0026#34;\u0026gt; \t\u0026lt;h1 class=\u0026#34;title\u0026#34;\u0026gt;Hi there\u0026lt;/h1\u0026gt; \t\u0026lt;p class=\u0026#34;lead\u0026#34;\u0026gt;I\u0026#39;m inside a code shortcode. Check out my syntax highlighting!.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;    Click so show content  [Hi there, I'm the hidden content. Didn't see that one coming, huh?]   The doublecode shortcode works the same as the code shortcode, but extends the functionality by also rendering the code in the page. This is useful for showing the code of HTML elements in your page.\nHi there\nI'm inside a doublecode shortcode, that's why I look so fancy.\n   Copy    \u0026lt;div class=\u0026#34;mydiv bg-primary shadow text-white p-3 m-4 border-primary\u0026#34;\u0026gt; \t\u0026lt;p class=\u0026#34;h4 title\u0026#34;\u0026gt;Hi there\u0026lt;/p\u0026gt; \t\u0026lt;p class=\u0026#34;lead mb-0\u0026#34;\u0026gt;I\u0026#39;m inside a doublecode shortcode, that\u0026#39;s why I look so fancy.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;    Great for introductions or summaries. I’m a lead paragraph. That means I’m more important. And you can see that. I\u0026#39;m Important  Be sure to read me       Tables are cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1     "},{"uri":"http://evan-m7.github.io/vspells/","title":"Vspells Homepage","tags":null,"description":"","content":"Great for introductions or summaries. I’m a lead paragraph. That means I’m more important. And you can see that. My Custom Description\n  Description 1\n  Description 2\n  Features   Fast.  Static files generated in less than a second. And served to your visitors just as fast.      Minimalistic.  A clean look to keep your user's attention to the content that matters: your documentation.      For every project.  Hugo does not require Java, Python or Ruby and is available as a simple binary or through NPM and other package managers.      Automatic.  Folders and files are automatically added in the menu depending on your file and folder structure.      Full search.  Easily find the content you look for through the search function.      Code highlighting.  Code highlighting. Include code samples with a copy button. If it’s HTML, you can also render the code.      Useful shortcodes.  Code, buttons, alerts, leads, collapse, panels, images, videos and more.      Built with Bootstrap.  Built with Bootstrap 4. Fully responsive out of the box. Build and style page elements using Bootstrap.      Icons.  Packed with Font Awesome. Empower your content with a shit ton of awesome icons.    "},{"uri":"http://evan-m7.github.io/vspells/posts3/page2/","title":"Academia","tags":null,"description":"","content":"Research DSLs Importance Powerful DSLs can be constructed for the operation of the robotic system. Hardware DSLs can also be created that monitor different subsystems such as battery depletion. The state space of the system can be thoroughly searched and verified. Heisenbugs that only show up in rare instances over long periods of time, can be uncovered using the P model checker. Not only can systems be modeled and tested, but the code for running the system can be auto generated from the models. The P drone example shown in the Real World Application section combines a P model with foreign functions to interface with the MavSDK library. The model is used to generate C code, which is used to run the simulation of the drone.\nEducation In the future, we want to learn to integrate hardware DSLs to model additional aspects of the system, such as battery consumption. This, for instance, allows automated reasoning over both flight plans and battery consumption. It can also be used in case of emergencies where critical information is needed to make critical decisions.\nProving Correctness "},{"uri":"http://evan-m7.github.io/vspells/posts2/page1/","title":"Cross-domain Reasoning Over Software Components and Battery Consumption","tags":null,"description":"","content":"Multi-DSL Reasoning  Drone HW Spec DSL \u0026ndash;\u0026gt; Logical Encoding (encoding) DSL Mission PLanner (P) DSL \u0026ndash;\u0026gt; Logical Encoding (encoding) DSL Energy Consuption Model DSL \u0026ndash;\u0026gt; Logical Encoding (encoding) DSL  Goal: Analyze an end-to-end safety property; e.g., “drone will always have enough battery capacity to return to the base during the mission” Need an ability to reason about interaction between mission logic and energy usage\nApproach: Develop multiple DSLs to capture these aspects in separate programs Translate these DSL programs into the logical encoding in FORMULA Leverage the symbolic execution engine in FORMULA for cross-domain analysis\nOn-going work on DSL for energy models Enabling cross-domain analysis\n Extend the existing FORMULA backend with solvers for non linear arithmetics (e.g., dReal)  Explaining cross-domain inconsistencies\n e.g., the drone runs out of battery before being able to return to the base When a counterexample is generated by the underlying solver, it is expressed in terms of low-level encodings in FORMULA Map the counterexample back to high-level DSL constructs Generate an explanation for the root cause behind the cross-domain inconsistency  "},{"uri":"http://evan-m7.github.io/vspells/shortcuts/page1/","title":"Page 1","tags":null,"description":"","content":"Hello, this is content!!!!!\n"},{"uri":"http://evan-m7.github.io/vspells/posts2/page2/","title":"Page 2","tags":null,"description":"","content":"Hello, this is content!!!!!\n"},{"uri":"http://evan-m7.github.io/vspells/shortcuts/page2/","title":"Page 2","tags":null,"description":"","content":"Hello, this is content!!!!!\nMore content\n"},{"uri":"http://evan-m7.github.io/vspells/posts3/page1/","title":"Real World Application","tags":null,"description":"","content":"Overview P is a state machine based programming language for modeling and specifying complex distributed systems. P allows programmers to model their system as a collection of communicating state machines. P supports several backend analysis engines such as model checking and symbolic execution. P can be systematically tested and compiled into executable code. Combining P with MavSDK, which is a collection of libraries to interface with the MAVLink drone messaging framework, creates a powerful simulation and testing environment for drone robotics systems. MavSDK can manage one or more vehicles via MAVLink. MavSDK communicates with the PX4 flight stack and all testing is done against PX4. Coupled with QGroundControl, a full simulation environment can be set up to test a distributed drone system before real-world deployment.\nDrone Example   Created representative drone example\n Quadrotor running open-source PX4 autopilot software    Backend communication uses MavSDK\n MavSDK: C++ library wrapped around MavLink to communicate with PX4    P state machines model the flight controller:\n Flight controller MavSDK communication Monitors Foreign function definitions    Synchronous functions in MavSDK\n Example: we want to know when drone reaches takeoff altitude \u0026ndash;\u0026gt; implemented by polling    Testing: generate C# code that is used to test with Coyote (P Model Checker)\n Liveness spec: ensure you don’t stay in a hot state of “pending request” Safety spec: check that state transition sequence is correct  Caught issues with model      Simulation: generate C code\n The P-generated glue code is run in the loop    "},{"uri":"http://evan-m7.github.io/vspells/categories/","title":"Categories","tags":null,"description":"","content":""},{"uri":"http://evan-m7.github.io/vspells/tags/","title":"Tags","tags":null,"description":"","content":""}]